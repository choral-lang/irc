* About

Modeling the IRC protocol using Choral.

* Building

It should always be possible to build the project with the most recent version
of Choral. To build the project:

1. Make sure you have the Choral libraries installed (=org.choral-lang:choral=
   and =org.choral-lang:runtime=).

   Choral does not yet publish its libraries to any Maven repository, so for now
   they have to be built from source. Choral IRC tracks Choral's master branch
   so it should always compile with the latest Choral version.

   Clone the [[https://github.com/choral-lang/choral][Choral repository]] and build and install the libraries:

   #+BEGIN_EXAMPLE
     mvn install
   #+END_EXAMPLE

2. Make sure you have the =choral= compiler script on your =PATH= and that
   you've set =CHORAL_PATH=.

   The script is just a wrapper that looks for the Choral standalone JAR under
   =CHORAL_HOME= and invokes it. The version of the JAR should match the version
   of the runtime you've installed.

   When building Choral from source, You can find the JAR under Choral's
   =dist/target=, which you can use as your =CHORAL_PATH=.

3. Build the project:

   #+BEGIN_EXAMPLE
     mvn compile
   #+END_EXAMPLE

   *NOTE*: Choral IRC expects that the Java compiler version listed in its
   =pom.xml= matches the one you have installed, since only then is the
   =--enable-preview= option valid. Additionally, we require at least Java 17.

   We try and track the latest Java compiler version available. In case yours is
   older, either update your Java compiler or modify =pom.xml= to match the one
   you have installed.

* Running

Run the server and the client programs separately:

#+BEGIN_EXAMPLE
  ./server
  ./client
#+END_EXAMPLE

Note that executing the Java code also requires the =--enable-preview=
option, which we provide to Maven through =.mvn/jvm.config=. If you want to
run the code in a different way, don't forget to pass the option.

Use the client's textual interface to connect to the server and run some
commands:

#+BEGIN_EXAMPLE
  /connect localhost 8667
  /nick choralbot
  /user choralbot
  /join #choral
  /privmsg #choral Hello!
  /part #choral Bye!
  /quit
#+END_EXAMPLE

* Binary Compatibility

The implementation is fully *binary-compatible* with IRC, i.e. it respects IRC's
wire format and doesn't perform any custom communications. Therefore, it's
possible to swap out the client or the server for a 3rd party counterpart.

E.g. you can connect to the IRC server using a 3rd party client such as Weechat,
HexChat, Konversation, etc., or you can use the IRC client to connect to a 3rd
party server, such as W3C:

#+BEGIN_EXAMPLE
  /connect irc.w3.org 6667
#+END_EXAMPLE
